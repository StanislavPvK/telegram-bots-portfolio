from aiogram import Router, F, types

from app.database import get_tasks, update_status, delete_task
from app.keyboards.reply_kb import reply_kb
from app.keyboards.inline_kb import create_tasks_keyboard, tasks_kb_del


# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query
callback_router = Router()


@callback_router.callback_query(F.data == "choose_done")
async def choose_task_to_done(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å.
    """

    tasks = await get_tasks(callback.from_user.id)

    # –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç ‚Äî –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not tasks:
        await callback.message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.", reply_markup=reply_kb)
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    tasks_keyboard = create_tasks_keyboard(tasks)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=tasks_keyboard)
    await callback.answer()


@callback_router.callback_query(F.data == "choose_del")
async def choose_task_to_delete(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """

    tasks = await get_tasks(callback.from_user.id)

    if not tasks:
        await callback.message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=reply_kb)
        await callback.answer()
        return

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    delete_tasks_keyboard = tasks_kb_del(tasks)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=delete_tasks_keyboard)
    await callback.answer()


@callback_router.callback_query(F.data.startswith("done_"))
async def complete_task(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏.
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    task_id = int(callback.data.split("_")[1])

    await update_status(task_id, "‚úÖ")
    await callback.message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!", reply_markup=reply_kb)
    await callback.answer()


@callback_router.callback_query(F.data.startswith("del_"))
async def remove_task(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏.
    –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    task_id = int(callback.data.split("_")[1])

    await delete_task(task_id)
    await callback.message.answer("‚ùå –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=reply_kb)
    await callback.answer()